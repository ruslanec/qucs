
# This script sets up the following matrix
#
# linux: gcc  , make check, qucs-test, gcov, coveralls integration
# linux: clang, make check, qucs-test, doxygen deploy
# osx:   clang, make check, qucs-test
#
# Try matrix tries to balance the run time of the instances instead of
# creating new instances for shorter jobs.
#
# Most time consuming tasks:
# - setup of gcc
# - gcov data collection
# - install Qt on OSX

language: cpp

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

python:
  - "2.7"
virtualenv:
  system_site_packages: true

matrix:
  exclude:
    - os: osx
      compiler: gcc

# Set secure environment with encrypted string containing GIT_NAME, GIT_EMAIL and GH_TOKEN
env:
  global:
    - secure: "B0OMVeuzPULW6CH0qAiecTXDrwIzIX6WYlQPpVNrGg2ACcbytr/i1bjVffynxU06fHBt0N4V1q8luFYlMImi8ALyjs1PSCx/y8q+Ej2H67xI9VSY+9qHROCoSSfFMzSk9EhFhvY1qt3uAQkxBznXQwkH9fYy1QqWcCp26YfCKCM="


before_install:

  # Set variables for readability.
  - if [[ $TRAVIS_OS_NAME == linux ]]; then LINUX=true; fi
  - if [[ $TRAVIS_OS_NAME == osx ]]; then OSX=true; fi
  - if [[ $CC == gcc ]]; then GCC=true; fi
  - if [[ $CC == clang ]]; then CLANG=true; fi

  # Set xvfb for headless qucs GUI test
  - "export DISPLAY=:99.0"
  -  if [[ $LINUX ]]; then sh -e /etc/init.d/xvfb start; fi

install:
  # Setup Linux
  # Set package repository for g++4.8, newer GNU tools
  - if [[ $LINUX ]]; then
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
      sudo add-apt-repository -y ppa:dns/gnu;
    fi

  # Install dependencies
  - if [[ $LINUX ]]; then
      sudo apt-get update -qq;
      sudo apt-get install build-essential;
      sudo apt-get install libqt4-dev libqt4-qt3support;
      sudo apt-get install automake libtool gperf flex bison;
    fi

  # We want to compile with g++ 4.8 when rather than the default g++
  - if [[ $LINUX && $GCC ]]; then
      sudo apt-get install -qq gcc-4.8 g++-4.8;
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90;
    fi

  # Set up for Coveralls for GCC (LINUX) only
  # lcov is required by configure, only gcov really needed thou
  - if [[ $GCC ]]; then
      sudo apt-get install lcov ;
      sudo pip install cpp-coveralls ;
    fi

  # Set up for Doxygen
  - if [[ $LINUX && $CLANG ]]; then
      sudo apt-get install -qq doxygen texlive graphviz ;
    fi

  # Qucs-Test uses Numpy to compare results
  - if [[ $LINUX ]]; then sudo apt-get install -qq python-numpy; fi

  # Setup OSX
  # Installed already: autoconf automake libtool pkg-config
  - if [[ $OSX ]]; then
      brew update;
      brew install flex;
      brew link --force flex;
      brew install bison;
      brew link --force bison;
    fi

  # Use tap for ADMS
  - if [[ $OSX ]]; then
      brew tap guitorri/tap;
      brew install adms;
    fi

  # Install official Qt (184MB)
  # Homebrew Qt binary has no Qt3Support (build from souce takes hours)
  - if [[ $OSX ]]; then
      QT_VERSION=4.8.6-1 ;
      curl -L -O http://download.qt.io/archive/qt/4.8/4.8.6/qt-opensource-mac-${QT_VERSION}.dmg ;
      hdiutil mount qt-opensource-mac-${QT_VERSION}.dmg ;
      sudo installer -pkg /Volumes/Qt\ 4.8.6/Qt.mpkg -target / ;
      hdiutil unmount /Volumes/Qt\ 4.8.6 ;
    fi

  # Grab tip of Qucs-Test
  - git clone --depth=1 --branch=master git://github.com/Qucs/qucs-test.git qucs-test

script:
  - uname -a
  - $CXX --version
  - autoconf --version
  - automake --version
  - which flex  && flex --version
  - which bison && bison --version
  # use gcov matched to GCC
  - if [[ $GCC ]]; then which gcov-4.8 && gcov-4.8 --version; fi
  - if [[ $GCC ]]; then  lcov --version; fi
  - python --version
  - python -c "import numpy; print numpy.__version__"
  - pwd
  - ls

  # Build ADMS from release (avoid need of Perl and its modules)
  - if [[ $LINUX ]]; then
      wget http://sourceforge.net/projects/mot-adms/files/adms-source/2.3/adms-2.3.4.tar.gz -O /tmp/adms-2.3.4.tar.gz;
      tar -xzvf /tmp/adms-2.3.4.tar.gz;
      cd adms-2.3.4 && ./configure --prefix=/usr && make && sudo make install && cd ..;
    fi

  # Check ADMS
  - which admsXml && admsXml --version

  # Build Qucs GUI components
  - cd qucs
  - ./autogen.sh
  - ./configure --enable-maintainer-mode --prefix=/usr --disable-dependency-tracking
  - make && sudo make install
  - cd ..

  # Test qucs installation
  - qucs -v

  # Build Qucs-core
  - cd qucs-core
  - ./bootstrap.sh

  # Only collect coverage for GCC (LINUX)
  # `make check-code-coverage` is failing due to old lcov
  - if [[ $GCC ]]; then
      ./configure --enable-maintainer-mode --prefix=/usr --with-mkadms=`which admsXml` --disable-dependency-tracking --enable-debug --enable-code-coverage  --with-gcov=gcov-4.8;
      make && sudo make install && make check;
    fi

  - if [[ $CLANG ]]; then
      ./configure --enable-maintainer-mode --prefix=/usr --with-mkadms=`which admsXml` --disable-dependency-tracking;
      make && sudo make install && make check;
    fi
  - cd ..

  # Test qucsator installation
  - qucsator -v

  # Run Qucs-Test suite and collect coverage
  # Need to be on `script` section to raise error as failure
  # Use qucsator in-tree to generate gcov coverage for GCC (LINUX)

  # Testsuite
  - cd qucs-test && python run.py --prefix $HOME/build/Qucs/qucs/qucs-core/src/ --qucsator --skip skip.txt && cd -

  # Qucs equation system
  - cd qucs-test && python run_equations.py --prefix $HOME/build/Qucs/qucs/qucs-core/src/ && cd -

  # Run Doxygen for qucs-GUI and qucs-core
  - if [[ $LINUX && $CLANG ]]; then
      TOP=`pwd`;

      cd qucs/contrib/doxygen/;
      VERSION=$(cat ../../VERSION);
      sed "s/0\.\0\.18/${VERSION}/g" doxygen.cfg  > temp;
      mv temp doxygen.cfg;
      doxygen doxygen.cfg;
      cd ${TOP};

      cd qucs-doc;
      ./autogen.sh;
      cd doxygen;
      make doxygen;
      cd ${TOP};
    fi

after_success:
  # Send coverage data to Coveralls
  - if [[ $GCC ]]; then
      coveralls --exclude examples --exclude qucs --exclude qucs-doc --exclude adms-2.3.4 --gcov-options '\-lp' --gcov gcov-4.8;
    fi

  # Publish HTML into Qucs/qucs-doxygen repo
  # See: http://awestruct.org/auto-deploy-to-github-pages/
  # Clone repo, put the html pages on its gh_pages branch
  # Credentials taken from the secure environment variables GIT_NAME, GIT_EMAIL and GH_TOKEN
  - if [[ $LINUX && $CLANG ]]; then
      git config --global user.name ${GIT_NAME} ;
      git config --global user.email ${GIT_EMAIL} ;
      git clone https://github.com/Qucs/qucs-doxygen.git qucs-doxygen ;
      cd qucs-doxygen ;
      git checkout gh-pages ;
      mv qucs/contrib/doxygen/html/ qucs/ ;
      mv qucs-doc/doxygen/html/ qucs-core/ ;
      git add --all . ;
      git commit -m "Auto-updating Doxygen developer documentation" ;
      git push https://${GH_TOKEN}@github.com/Qucs/qucs-doxygen gh-pages ;
    fi
